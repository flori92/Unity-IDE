import React, { useState } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Paper,
  TextField,
  Tab,
  Tabs,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Drawer,
  Avatar,
  Divider,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  useTheme,
  alpha,
} from '@mui/material';
import {
  Cloud as CloudIcon,
  Computer as ComputeIcon,
  Storage as StorageIcon,
  NetworkCheck as NetworkIcon,
  Security as SecurityIcon,
  Functions as FunctionIcon,
  Dns as DnsIcon,
  VpnLock as VpnIcon,
  Save as SaveIcon,
  PlayArrow as DeployIcon,
  Code as CodeIcon,
  Visibility as PreviewIcon,
  AttachMoney as CostIcon,
  Build as ValidateIcon,
  DragIndicator as DragIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';
import MonacoEditor from '@monaco-editor/react';

interface IaCResource {
  id: string;
  type: string;
  name: string;
  provider: 'aws' | 'azure' | 'gcp' | 'kubernetes';
  icon: React.ReactNode;
  config: Record<string, any>;
  estimatedCost?: number;
}

interface IaCTemplate {
  id: string;
  name: string;
  description: string;
  provider: string;
  resources: IaCResource[];
}

const IaCEditor: React.FC = () => {
  const theme = useTheme();
  const [activeTab, setActiveTab] = useState(0);
  const [drawerOpen, setDrawerOpen] = useState(true);
  const [resources, setResources] = useState<IaCResource[]>([]);
  const [selectedResource, setSelectedResource] = useState<IaCResource | null>(null);
  const [configDialogOpen, setConfigDialogOpen] = useState(false);
  const [generatedCode, setGeneratedCode] = useState('');
  const [selectedProvider, setSelectedProvider] = useState('terraform');

  // Resource templates
  const resourceTemplates = [
    { type: 'compute', name: 'EC2 Instance', provider: 'aws', icon: <ComputeIcon /> },
    { type: 'storage', name: 'S3 Bucket', provider: 'aws', icon: <StorageIcon /> },
    { type: 'network', name: 'VPC', provider: 'aws', icon: <NetworkIcon /> },
    { type: 'database', name: 'RDS Instance', provider: 'aws', icon: <StorageIcon /> },
    { type: 'function', name: 'Lambda Function', provider: 'aws', icon: <FunctionIcon /> },
    { type: 'compute', name: 'Virtual Machine', provider: 'azure', icon: <ComputeIcon /> },
    { type: 'storage', name: 'Storage Account', provider: 'azure', icon: <StorageIcon /> },
    { type: 'compute', name: 'GCE Instance', provider: 'gcp', icon: <ComputeIcon /> },
    { type: 'kubernetes', name: 'Deployment', provider: 'kubernetes', icon: <K8sIcon /> },
    { type: 'kubernetes', name: 'Service', provider: 'kubernetes', icon: <K8sIcon /> },
  ];

  const templates: IaCTemplate[] = [
    {
      id: '1',
      name: 'Basic Web App',
      description: 'EC2 + RDS + S3',
      provider: 'aws',
      resources: [],
    },
    {
      id: '2',
      name: 'Kubernetes Cluster',
      description: 'EKS cluster with nodes',
      provider: 'aws',
      resources: [],
    },
    {
      id: '3',
      name: 'Serverless API',
      description: 'API Gateway + Lambda + DynamoDB',
      provider: 'aws',
      resources: [],
    },
  ];

  const addResource = (template: any) => {
    const newResource: IaCResource = {
      id: Date.now().toString(),
      type: template.type,
      name: `${template.name}-${resources.length + 1}`,
      provider: template.provider,
      icon: template.icon,
      config: {
        instance_type: 't2.micro',
        region: 'us-east-1',
      },
      estimatedCost: Math.floor(Math.random() * 100) + 20,
    };
    setResources([...resources, newResource]);
  };

  const removeResource = (id: string) => {
    setResources(resources.filter(r => r.id !== id));
  };

  const generateTerraformCode = () => {
    let code = `# Generated by DevOps Unity IDE\n\n`;
    code += `provider "aws" {\n  region = "us-east-1"\n}\n\n`;
    
    resources.forEach(resource => {
      if (resource.provider === 'aws') {
        switch (resource.type) {
          case 'compute':
            code += `resource "aws_instance" "${resource.name.replace(/\s/g, '_')}" {\n`;
            code += `  ami           = "ami-0c55b159cbfafe1f0"\n`;
            code += `  instance_type = "${resource.config.instance_type || 't2.micro'}"\n`;
            code += `  tags = {\n    Name = "${resource.name}"\n  }\n}\n\n`;
            break;
          case 'storage':
            code += `resource "aws_s3_bucket" "${resource.name.replace(/\s/g, '_')}" {\n`;
            code += `  bucket = "${resource.name.toLowerCase().replace(/\s/g, '-')}"\n`;
            code += `  acl    = "private"\n}\n\n`;
            break;
          case 'database':
            code += `resource "aws_db_instance" "${resource.name.replace(/\s/g, '_')}" {\n`;
            code += `  allocated_storage = 20\n`;
            code += `  engine           = "postgres"\n`;
            code += `  instance_class   = "db.t2.micro"\n}\n\n`;
            break;
        }
      }
    });
    
    setGeneratedCode(code);
  };

  const generatePulumiCode = () => {
    let code = `import * as pulumi from "@pulumi/pulumi";\n`;
    code += `import * as aws from "@pulumi/aws";\n\n`;
    
    resources.forEach(resource => {
      if (resource.provider === 'aws') {
        switch (resource.type) {
          case 'compute':
            code += `const ${resource.name.replace(/\s/g, '')} = new aws.ec2.Instance("${resource.name}", {\n`;
            code += `  ami: "ami-0c55b159cbfafe1f0",\n`;
            code += `  instanceType: "${resource.config.instance_type || 't2.micro'}",\n`;
            code += `});\n\n`;
            break;
          case 'storage':
            code += `const ${resource.name.replace(/\s/g, '')} = new aws.s3.Bucket("${resource.name}", {\n`;
            code += `  acl: "private",\n`;
            code += `});\n\n`;
            break;
        }
      }
    });
    
    setGeneratedCode(code);
  };

  const totalCost = resources.reduce((sum, r) => sum + (r.estimatedCost || 0), 0);

  return (
    <Box sx={{ display: 'flex', height: 'calc(100vh - 64px)' }}>
      {/* Sidebar */}
      <Drawer
        variant="persistent"
        anchor="left"
        open={drawerOpen}
        sx={{
          width: drawerOpen ? 280 : 0,
          '& .MuiDrawer-paper': {
            width: 280,
            position: 'relative',
          },
        }}
      >
        <Box sx={{ p: 2 }}>
          <Typography variant="h6" gutterBottom>
            IaC Visual Editor
          </Typography>
          <FormControl fullWidth size="small" sx={{ mb: 2 }}>
            <InputLabel>Provider</InputLabel>
            <Select value={selectedProvider} onChange={(e) => setSelectedProvider(e.target.value)}>
              <MenuItem value="terraform">Terraform</MenuItem>
              <MenuItem value="pulumi">Pulumi</MenuItem>
              <MenuItem value="cloudformation">CloudFormation</MenuItem>
            </Select>
          </FormControl>
        </Box>

        <Tabs value={activeTab} onChange={(_, v) => setActiveTab(v)}>
          <Tab label="Resources" />
          <Tab label="Templates" />
        </Tabs>

        <Divider />

        {activeTab === 0 && (
          <List sx={{ p: 1 }}>
            <Typography variant="caption" color="text.secondary" sx={{ px: 2 }}>
              Drag or click to add resources
            </Typography>
            {resourceTemplates.map((template, index) => (
              <ListItem
                key={index}
                button
                onClick={() => addResource(template)}
                sx={{
                  mb: 0.5,
                  borderRadius: 1,
                  '&:hover': { bgcolor: 'action.hover' },
                }}
              >
                <ListItemIcon>{template.icon}</ListItemIcon>
                <ListItemText 
                  primary={template.name}
                  secondary={template.provider}
                />
                <Chip label={template.provider} size="small" />
              </ListItem>
            ))}
          </List>
        )}

        {activeTab === 1 && (
          <List sx={{ p: 2 }}>
            {templates.map(template => (
              <Card key={template.id} sx={{ mb: 2 }}>
                <CardContent>
                  <Typography variant="subtitle2">{template.name}</Typography>
                  <Typography variant="caption" color="text.secondary">
                    {template.description}
                  </Typography>
                  <Button size="small" sx={{ mt: 1 }}>Use Template</Button>
                </CardContent>
              </Card>
            ))}
          </List>
        )}
      </Drawer>

      {/* Main Content */}
      <Box sx={{ flexGrow: 1, p: 3 }}>
        {/* Header */}
        <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box>
            <Typography variant="h5" fontWeight="bold">
              Infrastructure Configuration
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Visual infrastructure as code editor
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', gap: 2 }}>
            <Chip 
              icon={<CostIcon />} 
              label={`Est. $${totalCost}/month`}
              color={totalCost > 500 ? 'error' : 'success'}
            />
            <Button startIcon={<ValidateIcon />}>Validate</Button>
            <Button startIcon={<PreviewIcon />} onClick={() => {
              if (selectedProvider === 'terraform') generateTerraformCode();
              else generatePulumiCode();
            }}>
              Generate Code
            </Button>
            <Button variant="contained" startIcon={<DeployIcon />}>Deploy</Button>
          </Box>
        </Box>

        {/* Resource Grid */}
        {resources.length === 0 ? (
          <Paper sx={{ p: 4, textAlign: 'center', bgcolor: alpha(theme.palette.primary.main, 0.05) }}>
            <CloudIcon sx={{ fontSize: 48, color: theme.palette.primary.main, mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              No resources added yet
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              Add resources from the sidebar or use a template to get started
            </Typography>
            <Button variant="contained" startIcon={<AddIcon />}>
              Add First Resource
            </Button>
          </Paper>
        ) : (
          <Grid container spacing={2}>
            {resources.map(resource => (
              <Grid item xs={12} sm={6} md={4} key={resource.id}>
                <Card>
                  <CardContent>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                      <Avatar sx={{ bgcolor: theme.palette.primary.main }}>
                        {resource.icon}
                      </Avatar>
                      <IconButton size="small" onClick={() => removeResource(resource.id)}>
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                    <Typography variant="h6">{resource.name}</Typography>
                    <Typography variant="caption" color="text.secondary">
                      {resource.provider} • {resource.type}
                    </Typography>
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="body2">
                        Type: {resource.config.instance_type}
                      </Typography>
                      <Typography variant="body2">
                        Region: {resource.config.region}
                      </Typography>
                    </Box>
                    <Chip 
                      label={`$${resource.estimatedCost}/mo`}
                      size="small"
                      sx={{ mt: 1 }}
                    />
                    <Button 
                      size="small" 
                      sx={{ mt: 1 }}
                      onClick={() => {
                        setSelectedResource(resource);
                        setConfigDialogOpen(true);
                      }}
                    >
                      Configure
                    </Button>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}

        {/* Generated Code */}
        {generatedCode && (
          <Paper sx={{ mt: 3, p: 2 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
              <Typography variant="h6">Generated {selectedProvider} Code</Typography>
              <Box>
                <Button startIcon={<SaveIcon />}>Save</Button>
                <Button startIcon={<CodeIcon />}>Copy</Button>
              </Box>
            </Box>
            <Box sx={{ height: 400 }}>
              <MonacoEditor
                height="100%"
                language={selectedProvider === 'pulumi' ? 'typescript' : 'hcl'}
                theme="vs-dark"
                value={generatedCode}
                options={{
                  readOnly: true,
                  minimap: { enabled: false },
                }}
              />
            </Box>
          </Paper>
        )}
      </Box>

      {/* Configuration Dialog */}
      <Dialog open={configDialogOpen} onClose={() => setConfigDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Configure {selectedResource?.name}</DialogTitle>
        <DialogContent>
          <TextField fullWidth label="Name" defaultValue={selectedResource?.name} sx={{ mb: 2, mt: 1 }} />
          <TextField fullWidth label="Instance Type" defaultValue={selectedResource?.config.instance_type} sx={{ mb: 2 }} />
          <TextField fullWidth label="Region" defaultValue={selectedResource?.config.region} />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfigDialogOpen(false)}>Cancel</Button>
          <Button variant="contained">Save</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

// Custom K8s Icon
const K8sIcon = () => (
  <CloudIcon />
);

export default IaCEditor;
